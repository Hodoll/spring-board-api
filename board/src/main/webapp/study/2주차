2주차 트러블 슈팅 및 새로 배운 것들 정리
 - Filter와 InterCeptor의 차이점. 
   1.필터는 시점이 인터셉터보다 앞단에 위치하며, 스프링 범위 밖에서 처리가 됨.
   2.인터셉터는 '스프링'이 제공하는 기술이며 스프링 내부에서 동작 
   3.필터는 스프링과 무관하게 전역적인 성향이며 더 많은 케이스를 다루지만, 인터셉터는 스프링에 종속되어 좀 더 좁은 범위(Controller 가공 등)에 사용된다.
   
 - 파일을 정확히 어떨때 구분해서 생성해야 할 지 모르겠음. 어떨 떄 패키지를 따야하고, 어떨떄 resource에 넣어야하는지 ... 
 
 - XSS는 크로스 사이트 스크립팅의 뜻. 악의적인 목적을 가지고 악성 스크립트를 삽입하여 의도하지 않은 명령을 실행시키거나 쿠키, 세션 등을 탈취하는 것임
   
 - @Configuration 태그가 존재하는 곳에 WebMvcConfigurer를 추가하라고 하여 찾아봤지만  Configuration이 추가된 곳은 없었음.
   아마도 @@SpringBootApplication 어노테이션을 타고 가다보면 @@SpringBootConfiguration이 나오고 그안에 @onfiguration이 선언되어 있음.
   즉, Main에 선언을 하는게 맞아보여 implements WebMvcConfigurer을 상속받아 사용 테스트 - 실패하였으며, XSS FILTER가 잘 적용되지 않음..
   
 - XSS FILTER 및 자바관련 질문필요
 
 - 인터셉터는 HandlerInterceptor를 상속받아서 사용함. 또한 Configuration 어노테이션을 사용하여 , WebMvcConfigurer를 상속받은 WebMvcConfig 클래스를 정의하여 사용
 - Git 커밋 잔디심기 누락 원인 해결
   commit Message의 Author와 Commiter의 이름과 실제 user.Email,Name의 이름이 달라서 누락되는 문제 = > 이를 해결하기 위해 
   gitHub Desktop 설치 => 환경변수 등록 => config --global user.email 메일@주소 및 이름 설정 
   => windows > preference > git > configuration user 이름 및 name 설정 
 - 환경변수 설정이유 > 환경변수를 설정하지 않으면 직접 해당 경로까지 들어가야만 접근이 가능함. 그러한 접근을 간편하게 하기 위해서 환경변수 사용 ex) 바로가기 만들기
 
 - 마스킹 처리 관련 test code 작성 - 일단은 마스킹처리 정규식을 그대로 가져왔으나 개인방식으로의 수정이 필요해보임
   테스트 코드를 작성하면 서버를 굳이 켜서 확인할 필요가 없어서 매우 편함. 테스트 코드의 극 장점인듯하다
   
 - filter도 어느정도 스프링의 제어를 받고 있으며, doFilter부분에서 FilterChain에 대한 처리를 해주어야 다음단계로의 연계가 가능
 
 - 마스킹에 정규식이 굳이 필요할 것 같지 않아서 재가공 하여 마스킹처리를 하였음
 
 - Util파일은 Static이 선언되어 있기 떄문에 따로 빈으로 등록하지 않음
 
 -Mock은 테스트 시, "했다치고"  return 값에 대한 응답을 전해주는 용도로 사용
 
 -테스트 코드는 케이스 마다 생성해야 하며, 하나의 테스트를 온전하게 두고, 다양한 케이스로 늘려 가는 것이 좋은 테스트코드 작성임
 
 -모르고 throws Exception을 사용해왔는데, 그냥 Exception을 사용하면 반드시 try,catch나 throws Exception에 대한 처리를 필요로함(Checked Exception)
  그러나 RuntimeException을 사용하면 바로 사용할 수 있으면 굳이  throws Exception에 대한 처리가 필요없음(UnChecked Exception)
  
 - gitIgnore라는 것을 이용하여 DB등 접속 정보가 담긴 application.properties 파일을 이그노어 처리했다.
   이미 기존에 올라가버렸을 경우 이그노어 처리가 되지 않으며, application2.properties로 잠심 옮겨 놓은 후 application.properties 삭제 > 커밋을 한 후에
   이그노어 적용을 하니 Git Staging에 올라오지 않는 것을 확인하였음.